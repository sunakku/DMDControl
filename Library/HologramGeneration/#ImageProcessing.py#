import math
import numpy as np
import scipy.ndimage as nd
import scipy.interpolate as interp
import sys
from PIL import Image as pil
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def rand_smoothing(gratingphase,alpha,omega,xsize,ysize):
	value = ( np.tanh(alpha*(gratingphase+omega/2))-np.tanh(alpha*(gratingphase-omega/2)))/2  #probability
	return np.divide(np.random.rand(xsize,ysize),value)
	 #x <1 at a given probability for each array elements


'''
TargetImage object
load target image, apply fft2 and return fourier images of desired resolution
'''
class TargetImage(object):
        def __init__(self, **kwargs):
                self.image = kwargs.pop('image', None)
                self.targetshape = kwargs.pop('shape', (540,540))
		self.path =  kwargs.pop('path', None)
		self.fimage = np.zeros(self.targetshape)

		##gaussian width within [0,1] from zero to imagesize*2
		self.width = kwargs.pop('width', 1.0)
		self.FWHM = self.width*self.targetshape[0]*2.354
	def imagefft(self):
		if self.image == "gaus":
			self.fimage = gaussian(self.targetshape,self.width)
		else:
			print "no function available for now"


'''
phasemap object
increase the resolution of measured phasemap by desired factors
return numpy array of size being (xsize*factor,ysize*factor)
where xsize,ysize = np.shape(Amp)
'''
class Phasemap(object):
        def __init__(self, **kwargs):
                self.method = kwargs.pop('method', None)
                self.Amp = kwargs.pop('Amp', np.zeros((9,9)))
                self.Phase = kwargs.pop('Phase', np.zeros((9,9)))
                self.Phase_res = kwargs.pop('Phase residual', np.zeros((9,9)))
                self.factor = kwargs.pop('factor', 30)
                self.phasemap_large = np.zeros((3,self.factor*np.shape(self.Amp)[0],self.factor*np.shape(self.Amp)[1] ))

	def interpolate(self):
                """                                                                  
                returns the interpolated image      
                """
		#upsample images
		fa=self.factor
		self.phasemap_large[0,fa/2::fa,fa/2::fa]=self.Amp
		self.phasemap_large[1,fa/2::fa,fa/2::fa]=self.Phase
		self.phasemap_large[2,fa/2::fa,fa/2::fa]=self.Phase_res
                self.phasemap_large = self.method(self.factor,self.phasemap_large)
	
	def interpolate_scipy(self):
                self.phasemap_large = self.method(self.factor,self.Amp,self.Phase,self.Phase_res)

	def interpolate_fft(self):
		ftAmp = np.fft.fft2(Amp)
		ftPhase = np.fft.fft2(Phase)
		ftphres = np.fft.fft2(Phase_res)
		self.phasemap_large = self.method(self.factor, ftAmp,ftPhase,ftphres)
'''
Hologram object
returns full DMD image (1920*1080) 
'''

class Hologram(object):
        def __init__(self, **kwargs):
                self.method = kwargs.pop('method', 'hologramize')
		self.image =  kwargs.pop('fimage', np.zeros((540,540),dtype=np.complex64))
                self.factor = kwargs.pop('factor', 30)
                self.phasemap_large = kwargs.pop('phasemap',np.zeros((3,540,540)))
		self.resolution = kwargs.pop('resolution', (1080,1920))
		self.alpha = kwargs.pop('alpha', 4)
		self.hologram = np.zeros(self.resolution)
		self.im_shape = np.shape(self.phasemap_large)[1]
		self.X, self.Y = np.meshgrid(np.arange(self.im_shape)-self.im_shape/2,np.arange(self.im_shape)-self.im_shape/2)
		self.imangle = np.angle(self.image)
		self.imamp = np.absolute(self.image) 

	def compute_hologram(self):
		phasesum = np.mod(self.phasemap_large[1]+self.imangle,2*math.pi)*12
		self.hologram = self.method(self.X,self.Y,self.alpha,self.phasemap_large[0],phasesum,self.imamp,self.resolution)


############functions

##############################
#image loading and fourier transf.
##############################
def imload(path):
	return np.aray(pil.open(path))

def gaussian(shape,width):
	nx = np.arange(0,shape[0]) - shape[0]/2
	xx,yy = np.meshgrid(nx,nx)
	return 1*np.exp(-(xx**2+yy**2)/(2.*(width*shape[0])**2))



##############################
#interpolation functions
##############################
#test data. gaussian phase map and intensity map
def gaus(factor,phasemap):
	width=0.2*np.shape(phasemap)[1]
	nx = np.arange(0,np.shape(phasemap)[1]) - np.shape(phasemap)[1]/2
	xx,yy = np.meshgrid(nx,nx)
	phasemap[0] = 1*np.exp(-(xx**2+yy**2)/(2.*width**2))
	phasemap[1] = 1*np.exp(-(xx**2+yy**2)/(2.*width**2))
	phasemap[2] = 0
	return phasemap

##using ndi convolve function
def linear_i(factor,phasemap):
	rect = np.zeros((factor*2,factor*2))
	rect[factor/2:3/2.*factor,factor/2:3/2.*factor] = 1
	kernel=nd.convolve(rect,rect)
	maxval = phasemap.max(axis=2).max(axis=1)
	minval = phasemap.min(axis=2).min(axis=1)
	for j in np.arange(3):
		convolved = nd.convolve(phasemap[j],kernel)
		convolved -= np.amin(convolved)#set minimum to zero
		phasemap[j] = (maxval[j]-minval[j])*convolved/(np.amax(convolved))#rescale
	phasemap[0] /= np.amax(phasemap[0]) #normalize intensity
	return phasemap


def sinc_i(factor,phasemap):
	size = np.shape(phasemap)[1]
	kernel = np.zeros((size,size))
	width = size/2/factor
	kernel[size/2-width:size/2+width,size/2-width:size/2+width]=1
	kernel = np.fft.fftshift(kernel)
	maxval = phasemap.max(axis=2).max(axis=1)
	minval = phasemap.min(axis=2).min(axis=1)
	for i in np.arange(3):
		convolved = np.fft.ifft2(np.fft.fft2(phasemap[i])*kernel).real
		convolved -= np.amin(convolved)#set minimum to zero
		phasemap[i] = (maxval[i]-minval[i])*convolved/(np.amax(convolved))#rescale
	phasemap[0] /= np.amax(phasemap[0]) #normalize intensity
	return phasemap

##using scipy.interpolate.interp2d
def cubic_i(factor,amp,phase,phres,phasemap):
	size = np.shape(phase)[1]
	x = np.arange(size)
	y = np.arange(size)
	x_new = np.arange(factor*size)
	y_new = np.arange(factor*size)
	phasemap[0] = interp.interp2d(x,y,amp,kind='cubic')(x_new,y_new)
	phasemap[1] = interp.interp2d(x,y,phase,kind='cubic')(x_new,y_new)
	phasemap[2] = interp.interp2d(x,y,phres,kind='cubic')(x_new,y_new)
	return phasemap

##using fourier plane convolution(simply multiply in fourier plane) for speed up
def zeropad(factor,ftAmp,ftPhase,ftphres):
	'''
	**under construction as of nov 1 2016 @sunami
	'''
	zp_phasemap = np.zeros((3,factor*np.shape(ftAmp)[0],factor*np.shape(ftAmp)[1] ))
	zp_phasemap[0] = np.fft.ifft(Amp)	


##############################
#hologram functions
##############################
def hologramize(X,Y,alpha,amp,phasesum,imageamp,resolution):
	dmdpattern = np.zeros(resolution)
	gratingphase = np.mod(Y+X+phasesum,12)/12.
	#####set minimum value for amp.
	#####to avoid inf in omega
	#####effect to intensity:1%
	amp += 0.01
	omega = (imageamp/amp)/np.amax(imageamp/amp)
      	Xsize,Ysize = np.shape(amp)
	hologram=1*(rand_smoothing(gratingphase,alpha,omega,Xsize,Ysize) <1)
	dmdpattern[540-Xsize/2:540+Xsize/2,960-Ysize/2:960+Ysize/2]=hologram
	return dmdpattern
	
if __name__ == '__main__':
	print "test"






